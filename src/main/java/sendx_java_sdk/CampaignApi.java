/*
 * SendX REST API
 * # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sendx_java_sdk;

import sendx_java_sdk.ApiCallback;
import sendx_java_sdk.ApiClient;
import sendx_java_sdk.ApiException;
import sendx_java_sdk.ApiResponse;
import sendx_java_sdk.Configuration;
import sendx_java_sdk.Pair;
import sendx_java_sdk.ProgressRequestBody;
import sendx_java_sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import sendx_java_sdk.Campaign;
import sendx_java_sdk.CampaignRequest;
import sendx_java_sdk.CreateResponse;
import sendx_java_sdk.DeleteCampaign200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CampaignApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CampaignApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCampaign
     * @param campaignRequest The campaign content (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Campaign Created Successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Tag with name already exists </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is not in proper format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCampaignCall(CampaignRequest campaignRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = campaignRequest;

        // create path and map variables
        String localVarPath = "/campaign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCampaignValidateBeforeCall(CampaignRequest campaignRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignRequest' is set
        if (campaignRequest == null) {
            throw new ApiException("Missing the required parameter 'campaignRequest' when calling createCampaign(Async)");
        }

        return createCampaignCall(campaignRequest, _callback);

    }

    /**
     * Create Campaign
     * Create a new email campaign
     * @param campaignRequest The campaign content (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Campaign Created Successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Tag with name already exists </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is not in proper format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public CreateResponse createCampaign(CampaignRequest campaignRequest) throws ApiException {
        ApiResponse<CreateResponse> localVarResp = createCampaignWithHttpInfo(campaignRequest);
        return localVarResp.getData();
    }

    /**
     * Create Campaign
     * Create a new email campaign
     * @param campaignRequest The campaign content (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Campaign Created Successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Tag with name already exists </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is not in proper format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateResponse> createCampaignWithHttpInfo(CampaignRequest campaignRequest) throws ApiException {
        okhttp3.Call localVarCall = createCampaignValidateBeforeCall(campaignRequest, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Campaign (asynchronously)
     * Create a new email campaign
     * @param campaignRequest The campaign content (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Campaign Created Successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Tag with name already exists </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is not in proper format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCampaignAsync(CampaignRequest campaignRequest, final ApiCallback<CreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCampaignValidateBeforeCall(campaignRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCampaign
     * @param campaignId The ID of the campaign to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Campaign deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Campaign ID is empty </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is not in proper format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Err </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCampaignCall(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaign/{campaignId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCampaignValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteCampaign(Async)");
        }

        return deleteCampaignCall(campaignId, _callback);

    }

    /**
     * Delete Campaign
     * Deletes a specific campaign by its campaignId.
     * @param campaignId The ID of the campaign to delete (required)
     * @return DeleteCampaign200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Campaign deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Campaign ID is empty </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is not in proper format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Err </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCampaign200Response deleteCampaign(String campaignId) throws ApiException {
        ApiResponse<DeleteCampaign200Response> localVarResp = deleteCampaignWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * Delete Campaign
     * Deletes a specific campaign by its campaignId.
     * @param campaignId The ID of the campaign to delete (required)
     * @return ApiResponse&lt;DeleteCampaign200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Campaign deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Campaign ID is empty </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is not in proper format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Err </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteCampaign200Response> deleteCampaignWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = deleteCampaignValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<DeleteCampaign200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Campaign (asynchronously)
     * Deletes a specific campaign by its campaignId.
     * @param campaignId The ID of the campaign to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Campaign deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Campaign ID is empty </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is not in proper format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Err </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCampaignAsync(String campaignId, final ApiCallback<DeleteCampaign200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCampaignValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<DeleteCampaign200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editCampaign
     * @param campaignId The ID of the campaign to edit (required)
     * @param campaignRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Campaign edited successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Tag with name already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is not in proper format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editCampaignCall(String campaignId, CampaignRequest campaignRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = campaignRequest;

        // create path and map variables
        String localVarPath = "/campaign/{campaignId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editCampaignValidateBeforeCall(String campaignId, CampaignRequest campaignRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling editCampaign(Async)");
        }

        // verify the required parameter 'campaignRequest' is set
        if (campaignRequest == null) {
            throw new ApiException("Missing the required parameter 'campaignRequest' when calling editCampaign(Async)");
        }

        return editCampaignCall(campaignId, campaignRequest, _callback);

    }

    /**
     * Edit Campaign
     * Submit edited content for a specific campaign.
     * @param campaignId The ID of the campaign to edit (required)
     * @param campaignRequest  (required)
     * @return Campaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Campaign edited successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Tag with name already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is not in proper format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Campaign editCampaign(String campaignId, CampaignRequest campaignRequest) throws ApiException {
        ApiResponse<Campaign> localVarResp = editCampaignWithHttpInfo(campaignId, campaignRequest);
        return localVarResp.getData();
    }

    /**
     * Edit Campaign
     * Submit edited content for a specific campaign.
     * @param campaignId The ID of the campaign to edit (required)
     * @param campaignRequest  (required)
     * @return ApiResponse&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Campaign edited successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Tag with name already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is not in proper format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Campaign> editCampaignWithHttpInfo(String campaignId, CampaignRequest campaignRequest) throws ApiException {
        okhttp3.Call localVarCall = editCampaignValidateBeforeCall(campaignId, campaignRequest, null);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit Campaign (asynchronously)
     * Submit edited content for a specific campaign.
     * @param campaignId The ID of the campaign to edit (required)
     * @param campaignRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Campaign edited successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Tag with name already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is not in proper format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editCampaignAsync(String campaignId, CampaignRequest campaignRequest, final ApiCallback<Campaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = editCampaignValidateBeforeCall(campaignId, campaignRequest, _callback);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllCampaigns
     * @param offset Offset for pagination (optional, default to 0)
     * @param limit Limit for pagination (optional, default to 20)
     * @param search Search term to filter campaigns (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved campaigns successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized - Invalid or missing API key. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCampaignsCall(Integer offset, Integer limit, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCampaignsValidateBeforeCall(Integer offset, Integer limit, String search, final ApiCallback _callback) throws ApiException {
        return getAllCampaignsCall(offset, limit, search, _callback);

    }

    /**
     * Get All Campaigns
     * Retrieve a list of all campaigns.
     * @param offset Offset for pagination (optional, default to 0)
     * @param limit Limit for pagination (optional, default to 20)
     * @param search Search term to filter campaigns (optional)
     * @return List&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved campaigns successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized - Invalid or missing API key. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on the server. </td><td>  -  </td></tr>
     </table>
     */
    public List<Campaign> getAllCampaigns(Integer offset, Integer limit, String search) throws ApiException {
        ApiResponse<List<Campaign>> localVarResp = getAllCampaignsWithHttpInfo(offset, limit, search);
        return localVarResp.getData();
    }

    /**
     * Get All Campaigns
     * Retrieve a list of all campaigns.
     * @param offset Offset for pagination (optional, default to 0)
     * @param limit Limit for pagination (optional, default to 20)
     * @param search Search term to filter campaigns (optional)
     * @return ApiResponse&lt;List&lt;Campaign&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved campaigns successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized - Invalid or missing API key. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Campaign>> getAllCampaignsWithHttpInfo(Integer offset, Integer limit, String search) throws ApiException {
        okhttp3.Call localVarCall = getAllCampaignsValidateBeforeCall(offset, limit, search, null);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Campaigns (asynchronously)
     * Retrieve a list of all campaigns.
     * @param offset Offset for pagination (optional, default to 0)
     * @param limit Limit for pagination (optional, default to 20)
     * @param search Search term to filter campaigns (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved campaigns successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized - Invalid or missing API key. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCampaignsAsync(Integer offset, Integer limit, String search, final ApiCallback<List<Campaign>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCampaignsValidateBeforeCall(offset, limit, search, _callback);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignById
     * @param campaignId The ID of the campaign to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved campaign successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized - Invalid or missing API key. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable - Request not acceptable. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Tag with name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is not in proper format. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignByIdCall(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaign/{campaignId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignByIdValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaignById(Async)");
        }

        return getCampaignByIdCall(campaignId, _callback);

    }

    /**
     * Get Campaign By Id
     * Retrieve a specific campaign using its ID.
     * @param campaignId The ID of the campaign to retrieve. (required)
     * @return Campaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved campaign successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized - Invalid or missing API key. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable - Request not acceptable. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Tag with name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is not in proper format. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on the server. </td><td>  -  </td></tr>
     </table>
     */
    public Campaign getCampaignById(String campaignId) throws ApiException {
        ApiResponse<Campaign> localVarResp = getCampaignByIdWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * Get Campaign By Id
     * Retrieve a specific campaign using its ID.
     * @param campaignId The ID of the campaign to retrieve. (required)
     * @return ApiResponse&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved campaign successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized - Invalid or missing API key. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable - Request not acceptable. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Tag with name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is not in proper format. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on the server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Campaign> getCampaignByIdWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = getCampaignByIdValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Campaign By Id (asynchronously)
     * Retrieve a specific campaign using its ID.
     * @param campaignId The ID of the campaign to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved campaign successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized - Invalid or missing API key. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable - Request not acceptable. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - Tag with name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is not in proper format. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on the server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignByIdAsync(String campaignId, final ApiCallback<Campaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignByIdValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
