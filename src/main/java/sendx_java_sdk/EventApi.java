/*
 * SendX REST API
 * # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sendx_java_sdk;

import sendx_java_sdk.ApiCallback;
import sendx_java_sdk.ApiClient;
import sendx_java_sdk.ApiException;
import sendx_java_sdk.ApiResponse;
import sendx_java_sdk.Configuration;
import sendx_java_sdk.Pair;
import sendx_java_sdk.ProgressRequestBody;
import sendx_java_sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import sendx_java_sdk.CustomEventRequest;
import sendx_java_sdk.EventResponse;
import sendx_java_sdk.RevenueEventRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createRevenueEvent
     * @param revenueEventRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Revenue event recorded successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRevenueEventCall(RevenueEventRequest revenueEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = revenueEventRequest;

        // create path and map variables
        String localVarPath = "/events/revenue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRevenueEventValidateBeforeCall(RevenueEventRequest revenueEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'revenueEventRequest' is set
        if (revenueEventRequest == null) {
            throw new ApiException("Missing the required parameter 'revenueEventRequest' when calling createRevenueEvent(Async)");
        }

        return createRevenueEventCall(revenueEventRequest, _callback);

    }

    /**
     * Record a revenue event for a specific contact
     * Records a revenue event, which can be attributed to campaigns, drips, workflows, or other sources of user interaction.
     * @param revenueEventRequest  (required)
     * @return EventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Revenue event recorded successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public EventResponse createRevenueEvent(RevenueEventRequest revenueEventRequest) throws ApiException {
        ApiResponse<EventResponse> localVarResp = createRevenueEventWithHttpInfo(revenueEventRequest);
        return localVarResp.getData();
    }

    /**
     * Record a revenue event for a specific contact
     * Records a revenue event, which can be attributed to campaigns, drips, workflows, or other sources of user interaction.
     * @param revenueEventRequest  (required)
     * @return ApiResponse&lt;EventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Revenue event recorded successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventResponse> createRevenueEventWithHttpInfo(RevenueEventRequest revenueEventRequest) throws ApiException {
        okhttp3.Call localVarCall = createRevenueEventValidateBeforeCall(revenueEventRequest, null);
        Type localVarReturnType = new TypeToken<EventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Record a revenue event for a specific contact (asynchronously)
     * Records a revenue event, which can be attributed to campaigns, drips, workflows, or other sources of user interaction.
     * @param revenueEventRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Revenue event recorded successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRevenueEventAsync(RevenueEventRequest revenueEventRequest, final ApiCallback<EventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRevenueEventValidateBeforeCall(revenueEventRequest, _callback);
        Type localVarReturnType = new TypeToken<EventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pushCustomEvent
     * @param customEventRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Custom event created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pushCustomEventCall(CustomEventRequest customEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customEventRequest;

        // create path and map variables
        String localVarPath = "/events/custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pushCustomEventValidateBeforeCall(CustomEventRequest customEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customEventRequest' is set
        if (customEventRequest == null) {
            throw new ApiException("Missing the required parameter 'customEventRequest' when calling pushCustomEvent(Async)");
        }

        return pushCustomEventCall(customEventRequest, _callback);

    }

    /**
     * Push a custom event associated with a contact
     * Pushes a custom event with properties and values for a specified contact.
     * @param customEventRequest  (required)
     * @return EventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Custom event created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public EventResponse pushCustomEvent(CustomEventRequest customEventRequest) throws ApiException {
        ApiResponse<EventResponse> localVarResp = pushCustomEventWithHttpInfo(customEventRequest);
        return localVarResp.getData();
    }

    /**
     * Push a custom event associated with a contact
     * Pushes a custom event with properties and values for a specified contact.
     * @param customEventRequest  (required)
     * @return ApiResponse&lt;EventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Custom event created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventResponse> pushCustomEventWithHttpInfo(CustomEventRequest customEventRequest) throws ApiException {
        okhttp3.Call localVarCall = pushCustomEventValidateBeforeCall(customEventRequest, null);
        Type localVarReturnType = new TypeToken<EventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Push a custom event associated with a contact (asynchronously)
     * Pushes a custom event with properties and values for a specified contact.
     * @param customEventRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Custom event created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pushCustomEventAsync(CustomEventRequest customEventRequest, final ApiCallback<EventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pushCustomEventValidateBeforeCall(customEventRequest, _callback);
        Type localVarReturnType = new TypeToken<EventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
