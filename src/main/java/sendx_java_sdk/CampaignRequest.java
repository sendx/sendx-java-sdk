/*
 * SendX REST API
 * # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sendx_java_sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import sendx_java_sdk.JSON;

/**
 * CampaignRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T14:08:56.611307+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class CampaignRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_HTML_CODE = "htmlCode";
  @SerializedName(SERIALIZED_NAME_HTML_CODE)
  private String htmlCode;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private String sender;

  public static final String SERIALIZED_NAME_PREVIEW_TEXT = "previewText";
  @SerializedName(SERIALIZED_NAME_PREVIEW_TEXT)
  private String previewText;

  /**
   * The type of scheduling for the campaign &lt;br&gt; 0: Send Now &lt;br&gt; 1: Send Later 
   */
  @JsonAdapter(ScheduleTypeEnum.Adapter.class)
  public enum ScheduleTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    ScheduleTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScheduleTypeEnum fromValue(Integer value) {
      for (ScheduleTypeEnum b : ScheduleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScheduleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScheduleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScheduleTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ScheduleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ScheduleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEDULE_TYPE = "scheduleType";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TYPE)
  private ScheduleTypeEnum scheduleType;

  public static final String SERIALIZED_NAME_SCHEDULE_CONDITION = "scheduleCondition";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_CONDITION)
  private String scheduleCondition;

  public static final String SERIALIZED_NAME_TIME_CONDITION = "timeCondition";
  @SerializedName(SERIALIZED_NAME_TIME_CONDITION)
  private String timeCondition;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_PREFERRED_TIMEZONE = "preferredTimezone";
  @SerializedName(SERIALIZED_NAME_PREFERRED_TIMEZONE)
  private String preferredTimezone;

  public static final String SERIALIZED_NAME_PREFERRED_TIME_CONDITION = "preferredTimeCondition";
  @SerializedName(SERIALIZED_NAME_PREFERRED_TIME_CONDITION)
  private String preferredTimeCondition;

  public static final String SERIALIZED_NAME_SEND_IN_CONTACTS_TIMEZONE = "sendInContactsTimezone";
  @SerializedName(SERIALIZED_NAME_SEND_IN_CONTACTS_TIMEZONE)
  private Boolean sendInContactsTimezone;

  public static final String SERIALIZED_NAME_SMART_SEND = "smartSend";
  @SerializedName(SERIALIZED_NAME_SMART_SEND)
  private Boolean smartSend;

  public static final String SERIALIZED_NAME_INCLUDED_SEGMENTS = "includedSegments";
  @SerializedName(SERIALIZED_NAME_INCLUDED_SEGMENTS)
  private List<String> includedSegments = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_LISTS = "includedLists";
  @SerializedName(SERIALIZED_NAME_INCLUDED_LISTS)
  private List<String> includedLists = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_TAGS = "includedTags";
  @SerializedName(SERIALIZED_NAME_INCLUDED_TAGS)
  private List<String> includedTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDED_SEGMENTS = "excludedSegments";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_SEGMENTS)
  private List<String> excludedSegments = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDED_LISTS = "excludedLists";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_LISTS)
  private List<String> excludedLists = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDED_TAGS = "excludedTags";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_TAGS)
  private List<String> excludedTags = new ArrayList<>();

  public CampaignRequest() {
  }

  public CampaignRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the campaign.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CampaignRequest htmlCode(String htmlCode) {
    this.htmlCode = htmlCode;
    return this;
  }

  /**
   * The HTML code of the campaign.
   * @return htmlCode
   */
  @javax.annotation.Nullable
  public String getHtmlCode() {
    return htmlCode;
  }

  public void setHtmlCode(String htmlCode) {
    this.htmlCode = htmlCode;
  }


  public CampaignRequest subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * The subject of the campaign.
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public CampaignRequest sender(String sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Sender unique identifier.
   * @return sender
   */
  @javax.annotation.Nullable
  public String getSender() {
    return sender;
  }

  public void setSender(String sender) {
    this.sender = sender;
  }


  public CampaignRequest previewText(String previewText) {
    this.previewText = previewText;
    return this;
  }

  /**
   * The preview text shown in email clients.
   * @return previewText
   */
  @javax.annotation.Nullable
  public String getPreviewText() {
    return previewText;
  }

  public void setPreviewText(String previewText) {
    this.previewText = previewText;
  }


  public CampaignRequest scheduleType(ScheduleTypeEnum scheduleType) {
    this.scheduleType = scheduleType;
    return this;
  }

  /**
   * The type of scheduling for the campaign &lt;br&gt; 0: Send Now &lt;br&gt; 1: Send Later 
   * @return scheduleType
   */
  @javax.annotation.Nullable
  public ScheduleTypeEnum getScheduleType() {
    return scheduleType;
  }

  public void setScheduleType(ScheduleTypeEnum scheduleType) {
    this.scheduleType = scheduleType;
  }


  public CampaignRequest scheduleCondition(String scheduleCondition) {
    this.scheduleCondition = scheduleCondition;
    return this;
  }

  /**
   * The condition for scheduling the campaign.
   * @return scheduleCondition
   */
  @javax.annotation.Nullable
  public String getScheduleCondition() {
    return scheduleCondition;
  }

  public void setScheduleCondition(String scheduleCondition) {
    this.scheduleCondition = scheduleCondition;
  }


  public CampaignRequest timeCondition(String timeCondition) {
    this.timeCondition = timeCondition;
    return this;
  }

  /**
   * The specific time to send the campaign.
   * @return timeCondition
   */
  @javax.annotation.Nullable
  public String getTimeCondition() {
    return timeCondition;
  }

  public void setTimeCondition(String timeCondition) {
    this.timeCondition = timeCondition;
  }


  public CampaignRequest timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * The timezone for the campaign scheduling.
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public CampaignRequest preferredTimezone(String preferredTimezone) {
    this.preferredTimezone = preferredTimezone;
    return this;
  }

  /**
   * Preferred timezone for scheduling.
   * @return preferredTimezone
   */
  @javax.annotation.Nullable
  public String getPreferredTimezone() {
    return preferredTimezone;
  }

  public void setPreferredTimezone(String preferredTimezone) {
    this.preferredTimezone = preferredTimezone;
  }


  public CampaignRequest preferredTimeCondition(String preferredTimeCondition) {
    this.preferredTimeCondition = preferredTimeCondition;
    return this;
  }

  /**
   * Specific time preference for sending the campaign.
   * @return preferredTimeCondition
   */
  @javax.annotation.Nullable
  public String getPreferredTimeCondition() {
    return preferredTimeCondition;
  }

  public void setPreferredTimeCondition(String preferredTimeCondition) {
    this.preferredTimeCondition = preferredTimeCondition;
  }


  public CampaignRequest sendInContactsTimezone(Boolean sendInContactsTimezone) {
    this.sendInContactsTimezone = sendInContactsTimezone;
    return this;
  }

  /**
   * Whether to send emails in each contact&#39;s timezone.
   * @return sendInContactsTimezone
   */
  @javax.annotation.Nullable
  public Boolean getSendInContactsTimezone() {
    return sendInContactsTimezone;
  }

  public void setSendInContactsTimezone(Boolean sendInContactsTimezone) {
    this.sendInContactsTimezone = sendInContactsTimezone;
  }


  public CampaignRequest smartSend(Boolean smartSend) {
    this.smartSend = smartSend;
    return this;
  }

  /**
   * Whether to enable smart send features (e.g., optimizing send time).
   * @return smartSend
   */
  @javax.annotation.Nullable
  public Boolean getSmartSend() {
    return smartSend;
  }

  public void setSmartSend(Boolean smartSend) {
    this.smartSend = smartSend;
  }


  public CampaignRequest includedSegments(List<String> includedSegments) {
    this.includedSegments = includedSegments;
    return this;
  }

  public CampaignRequest addIncludedSegmentsItem(String includedSegmentsItem) {
    if (this.includedSegments == null) {
      this.includedSegments = new ArrayList<>();
    }
    this.includedSegments.add(includedSegmentsItem);
    return this;
  }

  /**
   * List of segment IDs to include.
   * @return includedSegments
   */
  @javax.annotation.Nullable
  public List<String> getIncludedSegments() {
    return includedSegments;
  }

  public void setIncludedSegments(List<String> includedSegments) {
    this.includedSegments = includedSegments;
  }


  public CampaignRequest includedLists(List<String> includedLists) {
    this.includedLists = includedLists;
    return this;
  }

  public CampaignRequest addIncludedListsItem(String includedListsItem) {
    if (this.includedLists == null) {
      this.includedLists = new ArrayList<>();
    }
    this.includedLists.add(includedListsItem);
    return this;
  }

  /**
   * List of list IDs to include.
   * @return includedLists
   */
  @javax.annotation.Nullable
  public List<String> getIncludedLists() {
    return includedLists;
  }

  public void setIncludedLists(List<String> includedLists) {
    this.includedLists = includedLists;
  }


  public CampaignRequest includedTags(List<String> includedTags) {
    this.includedTags = includedTags;
    return this;
  }

  public CampaignRequest addIncludedTagsItem(String includedTagsItem) {
    if (this.includedTags == null) {
      this.includedTags = new ArrayList<>();
    }
    this.includedTags.add(includedTagsItem);
    return this;
  }

  /**
   * List of tag IDs to include.
   * @return includedTags
   */
  @javax.annotation.Nullable
  public List<String> getIncludedTags() {
    return includedTags;
  }

  public void setIncludedTags(List<String> includedTags) {
    this.includedTags = includedTags;
  }


  public CampaignRequest excludedSegments(List<String> excludedSegments) {
    this.excludedSegments = excludedSegments;
    return this;
  }

  public CampaignRequest addExcludedSegmentsItem(String excludedSegmentsItem) {
    if (this.excludedSegments == null) {
      this.excludedSegments = new ArrayList<>();
    }
    this.excludedSegments.add(excludedSegmentsItem);
    return this;
  }

  /**
   * List of segment IDs to exclude.
   * @return excludedSegments
   */
  @javax.annotation.Nullable
  public List<String> getExcludedSegments() {
    return excludedSegments;
  }

  public void setExcludedSegments(List<String> excludedSegments) {
    this.excludedSegments = excludedSegments;
  }


  public CampaignRequest excludedLists(List<String> excludedLists) {
    this.excludedLists = excludedLists;
    return this;
  }

  public CampaignRequest addExcludedListsItem(String excludedListsItem) {
    if (this.excludedLists == null) {
      this.excludedLists = new ArrayList<>();
    }
    this.excludedLists.add(excludedListsItem);
    return this;
  }

  /**
   * List of list IDs to exclude.
   * @return excludedLists
   */
  @javax.annotation.Nullable
  public List<String> getExcludedLists() {
    return excludedLists;
  }

  public void setExcludedLists(List<String> excludedLists) {
    this.excludedLists = excludedLists;
  }


  public CampaignRequest excludedTags(List<String> excludedTags) {
    this.excludedTags = excludedTags;
    return this;
  }

  public CampaignRequest addExcludedTagsItem(String excludedTagsItem) {
    if (this.excludedTags == null) {
      this.excludedTags = new ArrayList<>();
    }
    this.excludedTags.add(excludedTagsItem);
    return this;
  }

  /**
   * List of tag IDs to exclude.
   * @return excludedTags
   */
  @javax.annotation.Nullable
  public List<String> getExcludedTags() {
    return excludedTags;
  }

  public void setExcludedTags(List<String> excludedTags) {
    this.excludedTags = excludedTags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignRequest campaignRequest = (CampaignRequest) o;
    return Objects.equals(this.name, campaignRequest.name) &&
        Objects.equals(this.htmlCode, campaignRequest.htmlCode) &&
        Objects.equals(this.subject, campaignRequest.subject) &&
        Objects.equals(this.sender, campaignRequest.sender) &&
        Objects.equals(this.previewText, campaignRequest.previewText) &&
        Objects.equals(this.scheduleType, campaignRequest.scheduleType) &&
        Objects.equals(this.scheduleCondition, campaignRequest.scheduleCondition) &&
        Objects.equals(this.timeCondition, campaignRequest.timeCondition) &&
        Objects.equals(this.timezone, campaignRequest.timezone) &&
        Objects.equals(this.preferredTimezone, campaignRequest.preferredTimezone) &&
        Objects.equals(this.preferredTimeCondition, campaignRequest.preferredTimeCondition) &&
        Objects.equals(this.sendInContactsTimezone, campaignRequest.sendInContactsTimezone) &&
        Objects.equals(this.smartSend, campaignRequest.smartSend) &&
        Objects.equals(this.includedSegments, campaignRequest.includedSegments) &&
        Objects.equals(this.includedLists, campaignRequest.includedLists) &&
        Objects.equals(this.includedTags, campaignRequest.includedTags) &&
        Objects.equals(this.excludedSegments, campaignRequest.excludedSegments) &&
        Objects.equals(this.excludedLists, campaignRequest.excludedLists) &&
        Objects.equals(this.excludedTags, campaignRequest.excludedTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, htmlCode, subject, sender, previewText, scheduleType, scheduleCondition, timeCondition, timezone, preferredTimezone, preferredTimeCondition, sendInContactsTimezone, smartSend, includedSegments, includedLists, includedTags, excludedSegments, excludedLists, excludedTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    htmlCode: ").append(toIndentedString(htmlCode)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    previewText: ").append(toIndentedString(previewText)).append("\n");
    sb.append("    scheduleType: ").append(toIndentedString(scheduleType)).append("\n");
    sb.append("    scheduleCondition: ").append(toIndentedString(scheduleCondition)).append("\n");
    sb.append("    timeCondition: ").append(toIndentedString(timeCondition)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    preferredTimezone: ").append(toIndentedString(preferredTimezone)).append("\n");
    sb.append("    preferredTimeCondition: ").append(toIndentedString(preferredTimeCondition)).append("\n");
    sb.append("    sendInContactsTimezone: ").append(toIndentedString(sendInContactsTimezone)).append("\n");
    sb.append("    smartSend: ").append(toIndentedString(smartSend)).append("\n");
    sb.append("    includedSegments: ").append(toIndentedString(includedSegments)).append("\n");
    sb.append("    includedLists: ").append(toIndentedString(includedLists)).append("\n");
    sb.append("    includedTags: ").append(toIndentedString(includedTags)).append("\n");
    sb.append("    excludedSegments: ").append(toIndentedString(excludedSegments)).append("\n");
    sb.append("    excludedLists: ").append(toIndentedString(excludedLists)).append("\n");
    sb.append("    excludedTags: ").append(toIndentedString(excludedTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("htmlCode");
    openapiFields.add("subject");
    openapiFields.add("sender");
    openapiFields.add("previewText");
    openapiFields.add("scheduleType");
    openapiFields.add("scheduleCondition");
    openapiFields.add("timeCondition");
    openapiFields.add("timezone");
    openapiFields.add("preferredTimezone");
    openapiFields.add("preferredTimeCondition");
    openapiFields.add("sendInContactsTimezone");
    openapiFields.add("smartSend");
    openapiFields.add("includedSegments");
    openapiFields.add("includedLists");
    openapiFields.add("includedTags");
    openapiFields.add("excludedSegments");
    openapiFields.add("excludedLists");
    openapiFields.add("excludedTags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CampaignRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CampaignRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignRequest is not found in the empty JSON string", CampaignRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CampaignRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("htmlCode") != null && !jsonObj.get("htmlCode").isJsonNull()) && !jsonObj.get("htmlCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlCode").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) && !jsonObj.get("sender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender").toString()));
      }
      if ((jsonObj.get("previewText") != null && !jsonObj.get("previewText").isJsonNull()) && !jsonObj.get("previewText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previewText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previewText").toString()));
      }
      // validate the optional field `scheduleType`
      if (jsonObj.get("scheduleType") != null && !jsonObj.get("scheduleType").isJsonNull()) {
        ScheduleTypeEnum.validateJsonElement(jsonObj.get("scheduleType"));
      }
      if ((jsonObj.get("scheduleCondition") != null && !jsonObj.get("scheduleCondition").isJsonNull()) && !jsonObj.get("scheduleCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleCondition").toString()));
      }
      if ((jsonObj.get("timeCondition") != null && !jsonObj.get("timeCondition").isJsonNull()) && !jsonObj.get("timeCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeCondition").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("preferredTimezone") != null && !jsonObj.get("preferredTimezone").isJsonNull()) && !jsonObj.get("preferredTimezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredTimezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredTimezone").toString()));
      }
      if ((jsonObj.get("preferredTimeCondition") != null && !jsonObj.get("preferredTimeCondition").isJsonNull()) && !jsonObj.get("preferredTimeCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredTimeCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredTimeCondition").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedSegments") != null && !jsonObj.get("includedSegments").isJsonNull() && !jsonObj.get("includedSegments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedSegments` to be an array in the JSON string but got `%s`", jsonObj.get("includedSegments").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedLists") != null && !jsonObj.get("includedLists").isJsonNull() && !jsonObj.get("includedLists").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedLists` to be an array in the JSON string but got `%s`", jsonObj.get("includedLists").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedTags") != null && !jsonObj.get("includedTags").isJsonNull() && !jsonObj.get("includedTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedTags` to be an array in the JSON string but got `%s`", jsonObj.get("includedTags").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedSegments") != null && !jsonObj.get("excludedSegments").isJsonNull() && !jsonObj.get("excludedSegments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedSegments` to be an array in the JSON string but got `%s`", jsonObj.get("excludedSegments").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedLists") != null && !jsonObj.get("excludedLists").isJsonNull() && !jsonObj.get("excludedLists").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedLists` to be an array in the JSON string but got `%s`", jsonObj.get("excludedLists").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedTags") != null && !jsonObj.get("excludedTags").isJsonNull() && !jsonObj.get("excludedTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedTags` to be an array in the JSON string but got `%s`", jsonObj.get("excludedTags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignRequest>() {
           @Override
           public void write(JsonWriter out, CampaignRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CampaignRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CampaignRequest
   * @throws IOException if the JSON string is invalid with respect to CampaignRequest
   */
  public static CampaignRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignRequest.class);
  }

  /**
   * Convert an instance of CampaignRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

