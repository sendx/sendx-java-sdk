/*
 * SendX REST API
 * # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sendx_java_sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import sendx_java_sdk.JSON;

/**
 * ListModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-20T15:47:50.139618+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class ListModel {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Type of the list representing opt-in methods (1: Single Opt-In, 2: Double Opt-In)
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    TypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(Integer value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_SEND_THANK_YOU_MAIL = "sendThankYouMail";
  @SerializedName(SERIALIZED_NAME_SEND_THANK_YOU_MAIL)
  private Boolean sendThankYouMail;

  public static final String SERIALIZED_NAME_THANK_YOU_FROM_NAME = "thankYouFromName";
  @SerializedName(SERIALIZED_NAME_THANK_YOU_FROM_NAME)
  private String thankYouFromName;

  public static final String SERIALIZED_NAME_THANK_YOU_FROM_EMAIL = "thankYouFromEmail";
  @SerializedName(SERIALIZED_NAME_THANK_YOU_FROM_EMAIL)
  private String thankYouFromEmail;

  public static final String SERIALIZED_NAME_THANK_YOU_MAIL_SUBJECT = "thankYouMailSubject";
  @SerializedName(SERIALIZED_NAME_THANK_YOU_MAIL_SUBJECT)
  private String thankYouMailSubject;

  public static final String SERIALIZED_NAME_THANK_YOU_MAIL_MESSAGE = "thankYouMailMessage";
  @SerializedName(SERIALIZED_NAME_THANK_YOU_MAIL_MESSAGE)
  private String thankYouMailMessage;

  public static final String SERIALIZED_NAME_THANK_YOU_SENDER = "thankYouSender";
  @SerializedName(SERIALIZED_NAME_THANK_YOU_SENDER)
  private String thankYouSender;

  public static final String SERIALIZED_NAME_CONFIRM_FROM_NAME = "confirmFromName";
  @SerializedName(SERIALIZED_NAME_CONFIRM_FROM_NAME)
  private String confirmFromName;

  public static final String SERIALIZED_NAME_CONFIRM_FROM_EMAIL = "confirmFromEmail";
  @SerializedName(SERIALIZED_NAME_CONFIRM_FROM_EMAIL)
  private String confirmFromEmail;

  public static final String SERIALIZED_NAME_CONFIRM_MAIL_SUBJECT = "confirmMailSubject";
  @SerializedName(SERIALIZED_NAME_CONFIRM_MAIL_SUBJECT)
  private String confirmMailSubject;

  public static final String SERIALIZED_NAME_CONFIRM_MAIL_MESSAGE = "confirmMailMessage";
  @SerializedName(SERIALIZED_NAME_CONFIRM_MAIL_MESSAGE)
  private String confirmMailMessage;

  public static final String SERIALIZED_NAME_CONFIRM_SUCCESS_PAGE = "confirmSuccessPage";
  @SerializedName(SERIALIZED_NAME_CONFIRM_SUCCESS_PAGE)
  private String confirmSuccessPage;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_CONFIRM_SENDER = "confirmSender";
  @SerializedName(SERIALIZED_NAME_CONFIRM_SENDER)
  private String confirmSender;

  public ListModel() {
  }

  public ListModel id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Encrypted ID of the list
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ListModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the list
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ListModel type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the list representing opt-in methods (1: Single Opt-In, 2: Double Opt-In)
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ListModel sendThankYouMail(Boolean sendThankYouMail) {
    this.sendThankYouMail = sendThankYouMail;
    return this;
  }

  /**
   * Indicates if a thank-you email should be sent
   * @return sendThankYouMail
   */
  @javax.annotation.Nullable
  public Boolean getSendThankYouMail() {
    return sendThankYouMail;
  }

  public void setSendThankYouMail(Boolean sendThankYouMail) {
    this.sendThankYouMail = sendThankYouMail;
  }


  public ListModel thankYouFromName(String thankYouFromName) {
    this.thankYouFromName = thankYouFromName;
    return this;
  }

  /**
   * Name displayed as the sender in the thank-you email
   * @return thankYouFromName
   */
  @javax.annotation.Nullable
  public String getThankYouFromName() {
    return thankYouFromName;
  }

  public void setThankYouFromName(String thankYouFromName) {
    this.thankYouFromName = thankYouFromName;
  }


  public ListModel thankYouFromEmail(String thankYouFromEmail) {
    this.thankYouFromEmail = thankYouFromEmail;
    return this;
  }

  /**
   * Email address from which the thank-you email is sent
   * @return thankYouFromEmail
   */
  @javax.annotation.Nullable
  public String getThankYouFromEmail() {
    return thankYouFromEmail;
  }

  public void setThankYouFromEmail(String thankYouFromEmail) {
    this.thankYouFromEmail = thankYouFromEmail;
  }


  public ListModel thankYouMailSubject(String thankYouMailSubject) {
    this.thankYouMailSubject = thankYouMailSubject;
    return this;
  }

  /**
   * Subject line of the thank-you email
   * @return thankYouMailSubject
   */
  @javax.annotation.Nullable
  public String getThankYouMailSubject() {
    return thankYouMailSubject;
  }

  public void setThankYouMailSubject(String thankYouMailSubject) {
    this.thankYouMailSubject = thankYouMailSubject;
  }


  public ListModel thankYouMailMessage(String thankYouMailMessage) {
    this.thankYouMailMessage = thankYouMailMessage;
    return this;
  }

  /**
   * Plain text message body of the thank-you email
   * @return thankYouMailMessage
   */
  @javax.annotation.Nullable
  public String getThankYouMailMessage() {
    return thankYouMailMessage;
  }

  public void setThankYouMailMessage(String thankYouMailMessage) {
    this.thankYouMailMessage = thankYouMailMessage;
  }


  public ListModel thankYouSender(String thankYouSender) {
    this.thankYouSender = thankYouSender;
    return this;
  }

  /**
   * Details of the sender of the thank-you email
   * @return thankYouSender
   */
  @javax.annotation.Nullable
  public String getThankYouSender() {
    return thankYouSender;
  }

  public void setThankYouSender(String thankYouSender) {
    this.thankYouSender = thankYouSender;
  }


  public ListModel confirmFromName(String confirmFromName) {
    this.confirmFromName = confirmFromName;
    return this;
  }

  /**
   * Name displayed as the sender in the confirmation email
   * @return confirmFromName
   */
  @javax.annotation.Nullable
  public String getConfirmFromName() {
    return confirmFromName;
  }

  public void setConfirmFromName(String confirmFromName) {
    this.confirmFromName = confirmFromName;
  }


  public ListModel confirmFromEmail(String confirmFromEmail) {
    this.confirmFromEmail = confirmFromEmail;
    return this;
  }

  /**
   * Email address from which the confirmation email is sent
   * @return confirmFromEmail
   */
  @javax.annotation.Nullable
  public String getConfirmFromEmail() {
    return confirmFromEmail;
  }

  public void setConfirmFromEmail(String confirmFromEmail) {
    this.confirmFromEmail = confirmFromEmail;
  }


  public ListModel confirmMailSubject(String confirmMailSubject) {
    this.confirmMailSubject = confirmMailSubject;
    return this;
  }

  /**
   * Subject line of the confirmation email
   * @return confirmMailSubject
   */
  @javax.annotation.Nullable
  public String getConfirmMailSubject() {
    return confirmMailSubject;
  }

  public void setConfirmMailSubject(String confirmMailSubject) {
    this.confirmMailSubject = confirmMailSubject;
  }


  public ListModel confirmMailMessage(String confirmMailMessage) {
    this.confirmMailMessage = confirmMailMessage;
    return this;
  }

  /**
   * Plain text message body of the confirmation email
   * @return confirmMailMessage
   */
  @javax.annotation.Nullable
  public String getConfirmMailMessage() {
    return confirmMailMessage;
  }

  public void setConfirmMailMessage(String confirmMailMessage) {
    this.confirmMailMessage = confirmMailMessage;
  }


  public ListModel confirmSuccessPage(String confirmSuccessPage) {
    this.confirmSuccessPage = confirmSuccessPage;
    return this;
  }

  /**
   * URL of the success page after confirmation
   * @return confirmSuccessPage
   */
  @javax.annotation.Nullable
  public String getConfirmSuccessPage() {
    return confirmSuccessPage;
  }

  public void setConfirmSuccessPage(String confirmSuccessPage) {
    this.confirmSuccessPage = confirmSuccessPage;
  }


  public ListModel created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Date and time when the list was created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ListModel updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Date and time when the list was last updated
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  public ListModel confirmSender(String confirmSender) {
    this.confirmSender = confirmSender;
    return this;
  }

  /**
   * Details of the sender of the confirmation email
   * @return confirmSender
   */
  @javax.annotation.Nullable
  public String getConfirmSender() {
    return confirmSender;
  }

  public void setConfirmSender(String confirmSender) {
    this.confirmSender = confirmSender;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListModel listModel = (ListModel) o;
    return Objects.equals(this.id, listModel.id) &&
        Objects.equals(this.name, listModel.name) &&
        Objects.equals(this.type, listModel.type) &&
        Objects.equals(this.sendThankYouMail, listModel.sendThankYouMail) &&
        Objects.equals(this.thankYouFromName, listModel.thankYouFromName) &&
        Objects.equals(this.thankYouFromEmail, listModel.thankYouFromEmail) &&
        Objects.equals(this.thankYouMailSubject, listModel.thankYouMailSubject) &&
        Objects.equals(this.thankYouMailMessage, listModel.thankYouMailMessage) &&
        Objects.equals(this.thankYouSender, listModel.thankYouSender) &&
        Objects.equals(this.confirmFromName, listModel.confirmFromName) &&
        Objects.equals(this.confirmFromEmail, listModel.confirmFromEmail) &&
        Objects.equals(this.confirmMailSubject, listModel.confirmMailSubject) &&
        Objects.equals(this.confirmMailMessage, listModel.confirmMailMessage) &&
        Objects.equals(this.confirmSuccessPage, listModel.confirmSuccessPage) &&
        Objects.equals(this.created, listModel.created) &&
        Objects.equals(this.updated, listModel.updated) &&
        Objects.equals(this.confirmSender, listModel.confirmSender);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, sendThankYouMail, thankYouFromName, thankYouFromEmail, thankYouMailSubject, thankYouMailMessage, thankYouSender, confirmFromName, confirmFromEmail, confirmMailSubject, confirmMailMessage, confirmSuccessPage, created, updated, confirmSender);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListModel {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    sendThankYouMail: ").append(toIndentedString(sendThankYouMail)).append("\n");
    sb.append("    thankYouFromName: ").append(toIndentedString(thankYouFromName)).append("\n");
    sb.append("    thankYouFromEmail: ").append(toIndentedString(thankYouFromEmail)).append("\n");
    sb.append("    thankYouMailSubject: ").append(toIndentedString(thankYouMailSubject)).append("\n");
    sb.append("    thankYouMailMessage: ").append(toIndentedString(thankYouMailMessage)).append("\n");
    sb.append("    thankYouSender: ").append(toIndentedString(thankYouSender)).append("\n");
    sb.append("    confirmFromName: ").append(toIndentedString(confirmFromName)).append("\n");
    sb.append("    confirmFromEmail: ").append(toIndentedString(confirmFromEmail)).append("\n");
    sb.append("    confirmMailSubject: ").append(toIndentedString(confirmMailSubject)).append("\n");
    sb.append("    confirmMailMessage: ").append(toIndentedString(confirmMailMessage)).append("\n");
    sb.append("    confirmSuccessPage: ").append(toIndentedString(confirmSuccessPage)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    confirmSender: ").append(toIndentedString(confirmSender)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("sendThankYouMail");
    openapiFields.add("thankYouFromName");
    openapiFields.add("thankYouFromEmail");
    openapiFields.add("thankYouMailSubject");
    openapiFields.add("thankYouMailMessage");
    openapiFields.add("thankYouSender");
    openapiFields.add("confirmFromName");
    openapiFields.add("confirmFromEmail");
    openapiFields.add("confirmMailSubject");
    openapiFields.add("confirmMailMessage");
    openapiFields.add("confirmSuccessPage");
    openapiFields.add("created");
    openapiFields.add("updated");
    openapiFields.add("confirmSender");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListModel is not found in the empty JSON string", ListModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("thankYouFromName") != null && !jsonObj.get("thankYouFromName").isJsonNull()) && !jsonObj.get("thankYouFromName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thankYouFromName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thankYouFromName").toString()));
      }
      if ((jsonObj.get("thankYouFromEmail") != null && !jsonObj.get("thankYouFromEmail").isJsonNull()) && !jsonObj.get("thankYouFromEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thankYouFromEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thankYouFromEmail").toString()));
      }
      if ((jsonObj.get("thankYouMailSubject") != null && !jsonObj.get("thankYouMailSubject").isJsonNull()) && !jsonObj.get("thankYouMailSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thankYouMailSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thankYouMailSubject").toString()));
      }
      if ((jsonObj.get("thankYouMailMessage") != null && !jsonObj.get("thankYouMailMessage").isJsonNull()) && !jsonObj.get("thankYouMailMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thankYouMailMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thankYouMailMessage").toString()));
      }
      if ((jsonObj.get("thankYouSender") != null && !jsonObj.get("thankYouSender").isJsonNull()) && !jsonObj.get("thankYouSender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thankYouSender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thankYouSender").toString()));
      }
      if ((jsonObj.get("confirmFromName") != null && !jsonObj.get("confirmFromName").isJsonNull()) && !jsonObj.get("confirmFromName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmFromName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmFromName").toString()));
      }
      if ((jsonObj.get("confirmFromEmail") != null && !jsonObj.get("confirmFromEmail").isJsonNull()) && !jsonObj.get("confirmFromEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmFromEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmFromEmail").toString()));
      }
      if ((jsonObj.get("confirmMailSubject") != null && !jsonObj.get("confirmMailSubject").isJsonNull()) && !jsonObj.get("confirmMailSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmMailSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmMailSubject").toString()));
      }
      if ((jsonObj.get("confirmMailMessage") != null && !jsonObj.get("confirmMailMessage").isJsonNull()) && !jsonObj.get("confirmMailMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmMailMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmMailMessage").toString()));
      }
      if ((jsonObj.get("confirmSuccessPage") != null && !jsonObj.get("confirmSuccessPage").isJsonNull()) && !jsonObj.get("confirmSuccessPage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmSuccessPage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmSuccessPage").toString()));
      }
      if ((jsonObj.get("confirmSender") != null && !jsonObj.get("confirmSender").isJsonNull()) && !jsonObj.get("confirmSender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmSender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmSender").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ListModel>() {
           @Override
           public void write(JsonWriter out, ListModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListModel
   * @throws IOException if the JSON string is invalid with respect to ListModel
   */
  public static ListModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListModel.class);
  }

  /**
   * Convert an instance of ListModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

