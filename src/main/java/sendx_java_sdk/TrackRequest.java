/*
 * SendX REST API
 * # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sendx_java_sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import sendx_java_sdk.JSON;

/**
 * TrackRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-20T15:47:50.139618+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class TrackRequest {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ADD_TAGS = "addTags";
  @SerializedName(SERIALIZED_NAME_ADD_TAGS)
  private List<String> addTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_REMOVE_TAGS = "removeTags";
  @SerializedName(SERIALIZED_NAME_REMOVE_TAGS)
  private List<String> removeTags = new ArrayList<>();

  public TrackRequest() {
  }

  public TrackRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email address of the contact to track.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public TrackRequest addTags(List<String> addTags) {
    this.addTags = addTags;
    return this;
  }

  public TrackRequest addAddTagsItem(String addTagsItem) {
    if (this.addTags == null) {
      this.addTags = new ArrayList<>();
    }
    this.addTags.add(addTagsItem);
    return this;
  }

  /**
   * Get addTags
   * @return addTags
   */
  @javax.annotation.Nullable
  public List<String> getAddTags() {
    return addTags;
  }

  public void setAddTags(List<String> addTags) {
    this.addTags = addTags;
  }


  public TrackRequest removeTags(List<String> removeTags) {
    this.removeTags = removeTags;
    return this;
  }

  public TrackRequest addRemoveTagsItem(String removeTagsItem) {
    if (this.removeTags == null) {
      this.removeTags = new ArrayList<>();
    }
    this.removeTags.add(removeTagsItem);
    return this;
  }

  /**
   * Get removeTags
   * @return removeTags
   */
  @javax.annotation.Nullable
  public List<String> getRemoveTags() {
    return removeTags;
  }

  public void setRemoveTags(List<String> removeTags) {
    this.removeTags = removeTags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackRequest trackRequest = (TrackRequest) o;
    return Objects.equals(this.email, trackRequest.email) &&
        Objects.equals(this.addTags, trackRequest.addTags) &&
        Objects.equals(this.removeTags, trackRequest.removeTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, addTags, removeTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackRequest {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    addTags: ").append(toIndentedString(addTags)).append("\n");
    sb.append("    removeTags: ").append(toIndentedString(removeTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("addTags");
    openapiFields.add("removeTags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrackRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrackRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackRequest is not found in the empty JSON string", TrackRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrackRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("addTags") != null && !jsonObj.get("addTags").isJsonNull() && !jsonObj.get("addTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addTags` to be an array in the JSON string but got `%s`", jsonObj.get("addTags").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("removeTags") != null && !jsonObj.get("removeTags").isJsonNull() && !jsonObj.get("removeTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `removeTags` to be an array in the JSON string but got `%s`", jsonObj.get("removeTags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackRequest>() {
           @Override
           public void write(JsonWriter out, TrackRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrackRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrackRequest
   * @throws IOException if the JSON string is invalid with respect to TrackRequest
   */
  public static TrackRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackRequest.class);
  }

  /**
   * Convert an instance of TrackRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

