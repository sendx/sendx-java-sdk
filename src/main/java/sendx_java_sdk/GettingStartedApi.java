/*
 * SendX REST API
 * # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sendx_java_sdk;

import sendx_java_sdk.ApiCallback;
import sendx_java_sdk.ApiClient;
import sendx_java_sdk.ApiException;
import sendx_java_sdk.ApiResponse;
import sendx_java_sdk.Configuration;
import sendx_java_sdk.Pair;
import sendx_java_sdk.ProgressRequestBody;
import sendx_java_sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import sendx_java_sdk.IdentifyRequest;
import sendx_java_sdk.IdentifyResponse;
import sendx_java_sdk.TrackRequest;
import sendx_java_sdk.TrackResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GettingStartedApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GettingStartedApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GettingStartedApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for identifyContact
     * @param identifyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call identifyContactCall(IdentifyRequest identifyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identifyRequest;

        // create path and map variables
        String localVarPath = "/contact/identify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call identifyContactValidateBeforeCall(IdentifyRequest identifyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifyRequest' is set
        if (identifyRequest == null) {
            throw new ApiException("Missing the required parameter 'identifyRequest' when calling identifyContact(Async)");
        }

        return identifyContactCall(identifyRequest, _callback);

    }

    /**
     * Identify contact
     * Identify a contact by email address. If the contact already exists, it will be updated.
     * @param identifyRequest  (required)
     * @return IdentifyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public IdentifyResponse identifyContact(IdentifyRequest identifyRequest) throws ApiException {
        ApiResponse<IdentifyResponse> localVarResp = identifyContactWithHttpInfo(identifyRequest);
        return localVarResp.getData();
    }

    /**
     * Identify contact
     * Identify a contact by email address. If the contact already exists, it will be updated.
     * @param identifyRequest  (required)
     * @return ApiResponse&lt;IdentifyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentifyResponse> identifyContactWithHttpInfo(IdentifyRequest identifyRequest) throws ApiException {
        okhttp3.Call localVarCall = identifyContactValidateBeforeCall(identifyRequest, null);
        Type localVarReturnType = new TypeToken<IdentifyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Identify contact (asynchronously)
     * Identify a contact by email address. If the contact already exists, it will be updated.
     * @param identifyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call identifyContactAsync(IdentifyRequest identifyRequest, final ApiCallback<IdentifyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = identifyContactValidateBeforeCall(identifyRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentifyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trackingContact
     * @param trackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trackingContactCall(TrackRequest trackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trackRequest;

        // create path and map variables
        String localVarPath = "/contact/track";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trackingContactValidateBeforeCall(TrackRequest trackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trackRequest' is set
        if (trackRequest == null) {
            throw new ApiException("Missing the required parameter 'trackRequest' when calling trackingContact(Async)");
        }

        return trackingContactCall(trackRequest, _callback);

    }

    /**
     * Add Tracking info
     * Track a contact
     * @param trackRequest  (required)
     * @return TrackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public TrackResponse trackingContact(TrackRequest trackRequest) throws ApiException {
        ApiResponse<TrackResponse> localVarResp = trackingContactWithHttpInfo(trackRequest);
        return localVarResp.getData();
    }

    /**
     * Add Tracking info
     * Track a contact
     * @param trackRequest  (required)
     * @return ApiResponse&lt;TrackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrackResponse> trackingContactWithHttpInfo(TrackRequest trackRequest) throws ApiException {
        okhttp3.Call localVarCall = trackingContactValidateBeforeCall(trackRequest, null);
        Type localVarReturnType = new TypeToken<TrackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Tracking info (asynchronously)
     * Track a contact
     * @param trackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created Contact object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trackingContactAsync(TrackRequest trackRequest, final ApiCallback<TrackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = trackingContactValidateBeforeCall(trackRequest, _callback);
        Type localVarReturnType = new TypeToken<TrackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
