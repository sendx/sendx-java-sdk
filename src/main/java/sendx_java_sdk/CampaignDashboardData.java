/*
 * SendX REST API
 * # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sendx_java_sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import sendx_java_sdk.JSON;

/**
 * CampaignDashboardData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-25T16:47:38.261598+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class CampaignDashboardData {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_SENT_TIME = "sentTime";
  @SerializedName(SERIALIZED_NAME_SENT_TIME)
  private OffsetDateTime sentTime;

  public static final String SERIALIZED_NAME_CAMPAIGN_SCREENSHOT_URL = "campaignScreenshotUrl";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_SCREENSHOT_URL)
  private String campaignScreenshotUrl;

  public CampaignDashboardData() {
  }

  public CampaignDashboardData id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the campaign.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CampaignDashboardData name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the campaign.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CampaignDashboardData subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Subject of the campaign.
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public CampaignDashboardData sentTime(OffsetDateTime sentTime) {
    this.sentTime = sentTime;
    return this;
  }

  /**
   * The time the campaign was sent.
   * @return sentTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSentTime() {
    return sentTime;
  }

  public void setSentTime(OffsetDateTime sentTime) {
    this.sentTime = sentTime;
  }


  public CampaignDashboardData campaignScreenshotUrl(String campaignScreenshotUrl) {
    this.campaignScreenshotUrl = campaignScreenshotUrl;
    return this;
  }

  /**
   * URL to a screenshot of the campaign.
   * @return campaignScreenshotUrl
   */
  @javax.annotation.Nullable
  public String getCampaignScreenshotUrl() {
    return campaignScreenshotUrl;
  }

  public void setCampaignScreenshotUrl(String campaignScreenshotUrl) {
    this.campaignScreenshotUrl = campaignScreenshotUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignDashboardData campaignDashboardData = (CampaignDashboardData) o;
    return Objects.equals(this.id, campaignDashboardData.id) &&
        Objects.equals(this.name, campaignDashboardData.name) &&
        Objects.equals(this.subject, campaignDashboardData.subject) &&
        Objects.equals(this.sentTime, campaignDashboardData.sentTime) &&
        Objects.equals(this.campaignScreenshotUrl, campaignDashboardData.campaignScreenshotUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, subject, sentTime, campaignScreenshotUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignDashboardData {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    sentTime: ").append(toIndentedString(sentTime)).append("\n");
    sb.append("    campaignScreenshotUrl: ").append(toIndentedString(campaignScreenshotUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("subject");
    openapiFields.add("sentTime");
    openapiFields.add("campaignScreenshotUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CampaignDashboardData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CampaignDashboardData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignDashboardData is not found in the empty JSON string", CampaignDashboardData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CampaignDashboardData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignDashboardData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("campaignScreenshotUrl") != null && !jsonObj.get("campaignScreenshotUrl").isJsonNull()) && !jsonObj.get("campaignScreenshotUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignScreenshotUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignScreenshotUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignDashboardData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignDashboardData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignDashboardData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignDashboardData.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignDashboardData>() {
           @Override
           public void write(JsonWriter out, CampaignDashboardData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignDashboardData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CampaignDashboardData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CampaignDashboardData
   * @throws IOException if the JSON string is invalid with respect to CampaignDashboardData
   */
  public static CampaignDashboardData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignDashboardData.class);
  }

  /**
   * Convert an instance of CampaignDashboardData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

