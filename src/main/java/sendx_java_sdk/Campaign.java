/*
 * SendX REST API
 * # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sendx_java_sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import sendx_java_sdk.JSON;

/**
 * Campaign
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T14:08:56.611307+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class Campaign {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TRACK_REPLY = "trackReply";
  @SerializedName(SERIALIZED_NAME_TRACK_REPLY)
  private Boolean trackReply;

  /**
   * Campaign status: 0 (Draft), 1 (Scheduled), 2 (Sending), 3 (Sent), 4 (Quarantined)
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4);

    private Integer value;

    StatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(Integer value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Schedule type: 0 (Schedule later), 1 (Send Now), 2 (Trigger via automation), 3 (Recurring)
   */
  @JsonAdapter(ScheduleTypeEnum.Adapter.class)
  public enum ScheduleTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    ScheduleTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScheduleTypeEnum fromValue(Integer value) {
      for (ScheduleTypeEnum b : ScheduleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScheduleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScheduleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScheduleTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ScheduleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ScheduleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEDULE_TYPE = "scheduleType";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TYPE)
  private ScheduleTypeEnum scheduleType;

  public static final String SERIALIZED_NAME_SCHEDULE_CONDITION = "scheduleCondition";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_CONDITION)
  private String scheduleCondition;

  public static final String SERIALIZED_NAME_TIME_CONDITION = "timeCondition";
  @SerializedName(SERIALIZED_NAME_TIME_CONDITION)
  private String timeCondition;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_PREFERRED_TIME_CONDITION = "preferredTimeCondition";
  @SerializedName(SERIALIZED_NAME_PREFERRED_TIME_CONDITION)
  private String preferredTimeCondition;

  public static final String SERIALIZED_NAME_PREFERRED_TIMEZONE = "preferredTimezone";
  @SerializedName(SERIALIZED_NAME_PREFERRED_TIMEZONE)
  private String preferredTimezone;

  public static final String SERIALIZED_NAME_STRATEGY = "strategy";
  @SerializedName(SERIALIZED_NAME_STRATEGY)
  private String strategy;

  public static final String SERIALIZED_NAME_SEND_IN_CONTACTS_TIMEZONE = "sendInContactsTimezone";
  @SerializedName(SERIALIZED_NAME_SEND_IN_CONTACTS_TIMEZONE)
  private Boolean sendInContactsTimezone;

  public static final String SERIALIZED_NAME_SMART_SEND = "smartSend";
  @SerializedName(SERIALIZED_NAME_SMART_SEND)
  private Boolean smartSend;

  public static final String SERIALIZED_NAME_IS_ARCHIVED = "isArchived";
  @SerializedName(SERIALIZED_NAME_IS_ARCHIVED)
  private Boolean isArchived;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private String sender;

  public static final String SERIALIZED_NAME_CAMPAIGN_SCREENSHOT_URL = "campaignScreenshotUrl";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_SCREENSHOT_URL)
  private String campaignScreenshotUrl;

  public static final String SERIALIZED_NAME_INCLUDED_SEGMENTS = "includedSegments";
  @SerializedName(SERIALIZED_NAME_INCLUDED_SEGMENTS)
  private List<String> includedSegments = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_LISTS = "includedLists";
  @SerializedName(SERIALIZED_NAME_INCLUDED_LISTS)
  private List<String> includedLists = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_TAGS = "includedTags";
  @SerializedName(SERIALIZED_NAME_INCLUDED_TAGS)
  private List<String> includedTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDED_SEGMENTS = "excludedSegments";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_SEGMENTS)
  private List<String> excludedSegments = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDED_LISTS = "excludedLists";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_LISTS)
  private List<String> excludedLists = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDED_TAGS = "excludedTags";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_TAGS)
  private List<String> excludedTags = new ArrayList<>();

  public Campaign() {
  }

  public Campaign id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Encrypted ID of the campaign
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Campaign name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the campaign
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Campaign trackReply(Boolean trackReply) {
    this.trackReply = trackReply;
    return this;
  }

  /**
   * Indicates if replies to the campaign should be tracked
   * @return trackReply
   */
  @javax.annotation.Nullable
  public Boolean getTrackReply() {
    return trackReply;
  }

  public void setTrackReply(Boolean trackReply) {
    this.trackReply = trackReply;
  }


  public Campaign status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Campaign status: 0 (Draft), 1 (Scheduled), 2 (Sending), 3 (Sent), 4 (Quarantined)
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Campaign scheduleType(ScheduleTypeEnum scheduleType) {
    this.scheduleType = scheduleType;
    return this;
  }

  /**
   * Schedule type: 0 (Schedule later), 1 (Send Now), 2 (Trigger via automation), 3 (Recurring)
   * @return scheduleType
   */
  @javax.annotation.Nullable
  public ScheduleTypeEnum getScheduleType() {
    return scheduleType;
  }

  public void setScheduleType(ScheduleTypeEnum scheduleType) {
    this.scheduleType = scheduleType;
  }


  public Campaign scheduleCondition(String scheduleCondition) {
    this.scheduleCondition = scheduleCondition;
    return this;
  }

  /**
   * Condition for scheduling the campaign
   * @return scheduleCondition
   */
  @javax.annotation.Nullable
  public String getScheduleCondition() {
    return scheduleCondition;
  }

  public void setScheduleCondition(String scheduleCondition) {
    this.scheduleCondition = scheduleCondition;
  }


  public Campaign timeCondition(String timeCondition) {
    this.timeCondition = timeCondition;
    return this;
  }

  /**
   * Time-related condition for the campaign
   * @return timeCondition
   */
  @javax.annotation.Nullable
  public String getTimeCondition() {
    return timeCondition;
  }

  public void setTimeCondition(String timeCondition) {
    this.timeCondition = timeCondition;
  }


  public Campaign timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Timezone for the scheduled send
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public Campaign preferredTimeCondition(String preferredTimeCondition) {
    this.preferredTimeCondition = preferredTimeCondition;
    return this;
  }

  /**
   * Preferred time condition for the campaign
   * @return preferredTimeCondition
   */
  @javax.annotation.Nullable
  public String getPreferredTimeCondition() {
    return preferredTimeCondition;
  }

  public void setPreferredTimeCondition(String preferredTimeCondition) {
    this.preferredTimeCondition = preferredTimeCondition;
  }


  public Campaign preferredTimezone(String preferredTimezone) {
    this.preferredTimezone = preferredTimezone;
    return this;
  }

  /**
   * Preferred timezone for sending the campaign
   * @return preferredTimezone
   */
  @javax.annotation.Nullable
  public String getPreferredTimezone() {
    return preferredTimezone;
  }

  public void setPreferredTimezone(String preferredTimezone) {
    this.preferredTimezone = preferredTimezone;
  }


  public Campaign strategy(String strategy) {
    this.strategy = strategy;
    return this;
  }

  /**
   * Strategy for the campaign
   * @return strategy
   */
  @javax.annotation.Nullable
  public String getStrategy() {
    return strategy;
  }

  public void setStrategy(String strategy) {
    this.strategy = strategy;
  }


  public Campaign sendInContactsTimezone(Boolean sendInContactsTimezone) {
    this.sendInContactsTimezone = sendInContactsTimezone;
    return this;
  }

  /**
   * Indicates if the campaign should be sent in the recipient&#39;s timezone
   * @return sendInContactsTimezone
   */
  @javax.annotation.Nullable
  public Boolean getSendInContactsTimezone() {
    return sendInContactsTimezone;
  }

  public void setSendInContactsTimezone(Boolean sendInContactsTimezone) {
    this.sendInContactsTimezone = sendInContactsTimezone;
  }


  public Campaign smartSend(Boolean smartSend) {
    this.smartSend = smartSend;
    return this;
  }

  /**
   * Indicates if smart sending should be used
   * @return smartSend
   */
  @javax.annotation.Nullable
  public Boolean getSmartSend() {
    return smartSend;
  }

  public void setSmartSend(Boolean smartSend) {
    this.smartSend = smartSend;
  }


  public Campaign isArchived(Boolean isArchived) {
    this.isArchived = isArchived;
    return this;
  }

  /**
   * Indicates if the campaign is archived
   * @return isArchived
   */
  @javax.annotation.Nullable
  public Boolean getIsArchived() {
    return isArchived;
  }

  public void setIsArchived(Boolean isArchived) {
    this.isArchived = isArchived;
  }


  public Campaign sender(String sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Information about the sender of the campaign
   * @return sender
   */
  @javax.annotation.Nullable
  public String getSender() {
    return sender;
  }

  public void setSender(String sender) {
    this.sender = sender;
  }


  public Campaign campaignScreenshotUrl(String campaignScreenshotUrl) {
    this.campaignScreenshotUrl = campaignScreenshotUrl;
    return this;
  }

  /**
   * URL of the campaign&#39;s screenshot
   * @return campaignScreenshotUrl
   */
  @javax.annotation.Nullable
  public String getCampaignScreenshotUrl() {
    return campaignScreenshotUrl;
  }

  public void setCampaignScreenshotUrl(String campaignScreenshotUrl) {
    this.campaignScreenshotUrl = campaignScreenshotUrl;
  }


  public Campaign includedSegments(List<String> includedSegments) {
    this.includedSegments = includedSegments;
    return this;
  }

  public Campaign addIncludedSegmentsItem(String includedSegmentsItem) {
    if (this.includedSegments == null) {
      this.includedSegments = new ArrayList<>();
    }
    this.includedSegments.add(includedSegmentsItem);
    return this;
  }

  /**
   * Segments to be included in the campaign
   * @return includedSegments
   */
  @javax.annotation.Nullable
  public List<String> getIncludedSegments() {
    return includedSegments;
  }

  public void setIncludedSegments(List<String> includedSegments) {
    this.includedSegments = includedSegments;
  }


  public Campaign includedLists(List<String> includedLists) {
    this.includedLists = includedLists;
    return this;
  }

  public Campaign addIncludedListsItem(String includedListsItem) {
    if (this.includedLists == null) {
      this.includedLists = new ArrayList<>();
    }
    this.includedLists.add(includedListsItem);
    return this;
  }

  /**
   * Lists to be included in the campaign
   * @return includedLists
   */
  @javax.annotation.Nullable
  public List<String> getIncludedLists() {
    return includedLists;
  }

  public void setIncludedLists(List<String> includedLists) {
    this.includedLists = includedLists;
  }


  public Campaign includedTags(List<String> includedTags) {
    this.includedTags = includedTags;
    return this;
  }

  public Campaign addIncludedTagsItem(String includedTagsItem) {
    if (this.includedTags == null) {
      this.includedTags = new ArrayList<>();
    }
    this.includedTags.add(includedTagsItem);
    return this;
  }

  /**
   * Tags to be included in the campaign
   * @return includedTags
   */
  @javax.annotation.Nullable
  public List<String> getIncludedTags() {
    return includedTags;
  }

  public void setIncludedTags(List<String> includedTags) {
    this.includedTags = includedTags;
  }


  public Campaign excludedSegments(List<String> excludedSegments) {
    this.excludedSegments = excludedSegments;
    return this;
  }

  public Campaign addExcludedSegmentsItem(String excludedSegmentsItem) {
    if (this.excludedSegments == null) {
      this.excludedSegments = new ArrayList<>();
    }
    this.excludedSegments.add(excludedSegmentsItem);
    return this;
  }

  /**
   * Segments to be excluded from the campaign
   * @return excludedSegments
   */
  @javax.annotation.Nullable
  public List<String> getExcludedSegments() {
    return excludedSegments;
  }

  public void setExcludedSegments(List<String> excludedSegments) {
    this.excludedSegments = excludedSegments;
  }


  public Campaign excludedLists(List<String> excludedLists) {
    this.excludedLists = excludedLists;
    return this;
  }

  public Campaign addExcludedListsItem(String excludedListsItem) {
    if (this.excludedLists == null) {
      this.excludedLists = new ArrayList<>();
    }
    this.excludedLists.add(excludedListsItem);
    return this;
  }

  /**
   * Lists to be excluded from the campaign
   * @return excludedLists
   */
  @javax.annotation.Nullable
  public List<String> getExcludedLists() {
    return excludedLists;
  }

  public void setExcludedLists(List<String> excludedLists) {
    this.excludedLists = excludedLists;
  }


  public Campaign excludedTags(List<String> excludedTags) {
    this.excludedTags = excludedTags;
    return this;
  }

  public Campaign addExcludedTagsItem(String excludedTagsItem) {
    if (this.excludedTags == null) {
      this.excludedTags = new ArrayList<>();
    }
    this.excludedTags.add(excludedTagsItem);
    return this;
  }

  /**
   * Tags to be excluded from the campaign
   * @return excludedTags
   */
  @javax.annotation.Nullable
  public List<String> getExcludedTags() {
    return excludedTags;
  }

  public void setExcludedTags(List<String> excludedTags) {
    this.excludedTags = excludedTags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Campaign campaign = (Campaign) o;
    return Objects.equals(this.id, campaign.id) &&
        Objects.equals(this.name, campaign.name) &&
        Objects.equals(this.trackReply, campaign.trackReply) &&
        Objects.equals(this.status, campaign.status) &&
        Objects.equals(this.scheduleType, campaign.scheduleType) &&
        Objects.equals(this.scheduleCondition, campaign.scheduleCondition) &&
        Objects.equals(this.timeCondition, campaign.timeCondition) &&
        Objects.equals(this.timezone, campaign.timezone) &&
        Objects.equals(this.preferredTimeCondition, campaign.preferredTimeCondition) &&
        Objects.equals(this.preferredTimezone, campaign.preferredTimezone) &&
        Objects.equals(this.strategy, campaign.strategy) &&
        Objects.equals(this.sendInContactsTimezone, campaign.sendInContactsTimezone) &&
        Objects.equals(this.smartSend, campaign.smartSend) &&
        Objects.equals(this.isArchived, campaign.isArchived) &&
        Objects.equals(this.sender, campaign.sender) &&
        Objects.equals(this.campaignScreenshotUrl, campaign.campaignScreenshotUrl) &&
        Objects.equals(this.includedSegments, campaign.includedSegments) &&
        Objects.equals(this.includedLists, campaign.includedLists) &&
        Objects.equals(this.includedTags, campaign.includedTags) &&
        Objects.equals(this.excludedSegments, campaign.excludedSegments) &&
        Objects.equals(this.excludedLists, campaign.excludedLists) &&
        Objects.equals(this.excludedTags, campaign.excludedTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, trackReply, status, scheduleType, scheduleCondition, timeCondition, timezone, preferredTimeCondition, preferredTimezone, strategy, sendInContactsTimezone, smartSend, isArchived, sender, campaignScreenshotUrl, includedSegments, includedLists, includedTags, excludedSegments, excludedLists, excludedTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Campaign {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    trackReply: ").append(toIndentedString(trackReply)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    scheduleType: ").append(toIndentedString(scheduleType)).append("\n");
    sb.append("    scheduleCondition: ").append(toIndentedString(scheduleCondition)).append("\n");
    sb.append("    timeCondition: ").append(toIndentedString(timeCondition)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    preferredTimeCondition: ").append(toIndentedString(preferredTimeCondition)).append("\n");
    sb.append("    preferredTimezone: ").append(toIndentedString(preferredTimezone)).append("\n");
    sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
    sb.append("    sendInContactsTimezone: ").append(toIndentedString(sendInContactsTimezone)).append("\n");
    sb.append("    smartSend: ").append(toIndentedString(smartSend)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    campaignScreenshotUrl: ").append(toIndentedString(campaignScreenshotUrl)).append("\n");
    sb.append("    includedSegments: ").append(toIndentedString(includedSegments)).append("\n");
    sb.append("    includedLists: ").append(toIndentedString(includedLists)).append("\n");
    sb.append("    includedTags: ").append(toIndentedString(includedTags)).append("\n");
    sb.append("    excludedSegments: ").append(toIndentedString(excludedSegments)).append("\n");
    sb.append("    excludedLists: ").append(toIndentedString(excludedLists)).append("\n");
    sb.append("    excludedTags: ").append(toIndentedString(excludedTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("trackReply");
    openapiFields.add("status");
    openapiFields.add("scheduleType");
    openapiFields.add("scheduleCondition");
    openapiFields.add("timeCondition");
    openapiFields.add("timezone");
    openapiFields.add("preferredTimeCondition");
    openapiFields.add("preferredTimezone");
    openapiFields.add("strategy");
    openapiFields.add("sendInContactsTimezone");
    openapiFields.add("smartSend");
    openapiFields.add("isArchived");
    openapiFields.add("sender");
    openapiFields.add("campaignScreenshotUrl");
    openapiFields.add("includedSegments");
    openapiFields.add("includedLists");
    openapiFields.add("includedTags");
    openapiFields.add("excludedSegments");
    openapiFields.add("excludedLists");
    openapiFields.add("excludedTags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Campaign
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Campaign.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Campaign is not found in the empty JSON string", Campaign.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Campaign.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Campaign` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `scheduleType`
      if (jsonObj.get("scheduleType") != null && !jsonObj.get("scheduleType").isJsonNull()) {
        ScheduleTypeEnum.validateJsonElement(jsonObj.get("scheduleType"));
      }
      if ((jsonObj.get("scheduleCondition") != null && !jsonObj.get("scheduleCondition").isJsonNull()) && !jsonObj.get("scheduleCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleCondition").toString()));
      }
      if ((jsonObj.get("timeCondition") != null && !jsonObj.get("timeCondition").isJsonNull()) && !jsonObj.get("timeCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeCondition").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("preferredTimeCondition") != null && !jsonObj.get("preferredTimeCondition").isJsonNull()) && !jsonObj.get("preferredTimeCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredTimeCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredTimeCondition").toString()));
      }
      if ((jsonObj.get("preferredTimezone") != null && !jsonObj.get("preferredTimezone").isJsonNull()) && !jsonObj.get("preferredTimezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredTimezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredTimezone").toString()));
      }
      if ((jsonObj.get("strategy") != null && !jsonObj.get("strategy").isJsonNull()) && !jsonObj.get("strategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strategy").toString()));
      }
      if ((jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) && !jsonObj.get("sender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender").toString()));
      }
      if ((jsonObj.get("campaignScreenshotUrl") != null && !jsonObj.get("campaignScreenshotUrl").isJsonNull()) && !jsonObj.get("campaignScreenshotUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignScreenshotUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignScreenshotUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedSegments") != null && !jsonObj.get("includedSegments").isJsonNull() && !jsonObj.get("includedSegments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedSegments` to be an array in the JSON string but got `%s`", jsonObj.get("includedSegments").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedLists") != null && !jsonObj.get("includedLists").isJsonNull() && !jsonObj.get("includedLists").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedLists` to be an array in the JSON string but got `%s`", jsonObj.get("includedLists").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedTags") != null && !jsonObj.get("includedTags").isJsonNull() && !jsonObj.get("includedTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedTags` to be an array in the JSON string but got `%s`", jsonObj.get("includedTags").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedSegments") != null && !jsonObj.get("excludedSegments").isJsonNull() && !jsonObj.get("excludedSegments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedSegments` to be an array in the JSON string but got `%s`", jsonObj.get("excludedSegments").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedLists") != null && !jsonObj.get("excludedLists").isJsonNull() && !jsonObj.get("excludedLists").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedLists` to be an array in the JSON string but got `%s`", jsonObj.get("excludedLists").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedTags") != null && !jsonObj.get("excludedTags").isJsonNull() && !jsonObj.get("excludedTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedTags` to be an array in the JSON string but got `%s`", jsonObj.get("excludedTags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Campaign.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Campaign' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Campaign> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Campaign.class));

       return (TypeAdapter<T>) new TypeAdapter<Campaign>() {
           @Override
           public void write(JsonWriter out, Campaign value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Campaign read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Campaign given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Campaign
   * @throws IOException if the JSON string is invalid with respect to Campaign
   */
  public static Campaign fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Campaign.class);
  }

  /**
   * Convert an instance of Campaign to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

