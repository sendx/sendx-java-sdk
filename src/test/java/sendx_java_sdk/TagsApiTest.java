/*
 * SendX REST API
 * # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sendx_java_sdk;

import sendx_java_sdk.ApiException;
import sendx_java_sdk.CreateResponse;
import sendx_java_sdk.DeleteResponse;
import sendx_java_sdk.OperationResponse;
import sendx_java_sdk.Tag;
import sendx_java_sdk.TagRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TagsApi
 */
@Disabled
public class TagsApiTest {

    private final TagsApi api = new TagsApi();

    /**
     * Create a Tag
     *
     * Create a new tag for the account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagTest() throws ApiException {
        TagRequest tagRequest = null;
        CreateResponse response = api.createTag(tagRequest);
        // TODO: test validations
    }

    /**
     * Delete a Tag
     *
     * Delete an existing tag by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTagTest() throws ApiException {
        String tagId = null;
        DeleteResponse response = api.deleteTag(tagId);
        // TODO: test validations
    }

    /**
     * Get All Tags
     *
     * Retrieve all tags for the account with optional pagination and search filters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTagsTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        String search = null;
        List<Tag> response = api.getAllTags(offset, limit, search);
        // TODO: test validations
    }

    /**
     * Get a Tag by ID
     *
     * Retrieve a tag based on the provided tag ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagByIdTest() throws ApiException {
        String tagId = null;
        Tag response = api.getTagById(tagId);
        // TODO: test validations
    }

    /**
     * Update a Tag
     *
     * Update an existing tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTagTest() throws ApiException {
        String tagId = null;
        TagRequest tagRequest = null;
        OperationResponse response = api.updateTag(tagId, tagRequest);
        // TODO: test validations
    }

}
